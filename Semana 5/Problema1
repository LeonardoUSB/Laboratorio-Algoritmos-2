#include <iostream>
#include <vector>
#include <random>
using namespace std;
//Variables
int cont=0;
int c=0;
int n=0;
int tmp=0;
vector <int> arreglo;
vector <pair<int,int>> VectorR;

// Función para seleccionar un pivote aleatorio
int randomPivot(int low, int high) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(low, high);
    return dis(gen);
}

// Función para particionar el vector y colocar los elementos menores al pivote a la izquierda y los mayores a la derecha
int partition(vector <pair<int,int>>& arr, int low, int high) {
    int pivotIndex = randomPivot(low, high);
    int pivot = arr[pivotIndex].second;
    swap(arr[pivotIndex],arr[high]);
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j].second < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i+1],arr[high]);
    return i + 1;
}

// Función recursiva para realizar Quicksort
void quicksort(vector <pair<int,int>>& arr, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);
        quicksort(arr, low, pivotIndex - 1);
        quicksort(arr, pivotIndex + 1, high);
    }
}

int main() {
     //Llenamos el arreglo con el input
        cin >> n;
        cin >> c;
        arreglo.resize(n);
        for(int i=0; i<n;i++){
            cin>>arreglo[i];            
        }

        //Llenamos otro arreglo con información de los números repetidos
        //Funciona encontrando repetidos y almacenando en el VectorR el numero y su repeticion
        for (int k=0; k<n;k++){
            tmp=arreglo[k];
            for(int l=k; l<n;l++){
                if(tmp==-1){
                    cont=0;
                    break;
                }
                if(tmp==arreglo[l]){
                    cont++;
                    arreglo[l]=-1;
                }
            }
            if(tmp!=-1){
                VectorR.push_back({tmp,cont});
                cont=0;
            }        
        }
        //Aplicamos QuickSort en el nuevo arreglo
        vector <pair<int,int>> VectorR_Copy = VectorR;
        quicksort(VectorR, 0, VectorR.size() - 1);
        
        //Imprimos los resultados en orden
        //La copia del arreglo se usa porque, por como se creo, almacena el orden de aparición
        for(int o=VectorR.size()-1; o>=0;o--){
            int temp= VectorR[o].second;
            for(int p=0; p<VectorR_Copy.size();p++){
                if(VectorR_Copy[p].second==temp){
                    for(int q=0; q<temp;q++){
                        cout<<VectorR_Copy[p].first<<" ";
                    }
                    VectorR_Copy[p].second=-1;
                    break;
                }
            }
            
        }         
    
    }
