#include <iostream>
#include <vector>
#include <cmath>
#include <cstdint>

using namespace std;

// Ajustar las dimensiones de las matrices para que sean potencias

int potencia2(int k){
    return pow(2, int(ceil(log2(k))));
}


// Suma Matrices
void Suma(const vector<vector<long long unsigned int>> &A, const vector<vector<long long unsigned int>> &B, vector<vector<long long unsigned int>> &C, int Dims){
    for (int i = 0; i < Dims; i++){
        for (int j = 0; j < Dims; j++){
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}
// Resta Matrices
void Resta(const vector<vector<long long unsigned int>> &A, const vector<vector<long long unsigned int>> &B, vector<vector<long long unsigned int>> &C, int Dims){
    for (int i = 0; i < Dims; i++){
        for (int j = 0; j < Dims; j++){
            C[i][j] = A[i][j] - B[i][j];
        }
    }
}

// Multiplicacion Estander de Matrices
void Multiplicacion(const vector<vector<long long unsigned int>> &A, const vector<vector<long long unsigned int>> &B, vector<vector<long long unsigned int>> &C, int Dims) {
    for (int i = 0; i < Dims; ++i) {
        for (int j = 0; j < Dims; ++j) {
            C[i][j] = 0;
            for (int k = 0; k < Dims; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// Algoritmo de Strassen para multiplicar dos matrices.
void Strassen(const vector<vector<long long unsigned int>> &A, const vector<vector<long long unsigned int>> &B, vector<vector<long long unsigned int>> &C, int Dims, int minimo)
{
     // Usamos multiplicacion Estandar cuando el rango es pequeño:
    if (Dims <= minimo)
    {
        Multiplicacion(A, B, C, Dims);
        return;
    }

    
    int mitad = Dims / 2;
    

    //Iniciamos todas las submatrices y operandos de strassen
    vector<long long unsigned int> z(mitad);
    vector<vector<long long unsigned int>>
        a_11(mitad, z), a_12(mitad, z), a_21(mitad, z), a_22(mitad, z),
        b_11(mitad, z), b_12(mitad, z), b_21(mitad, z), b_22(mitad, z),
        c_11(mitad, z), c_12(mitad, z), c_21(mitad, z), c_22(mitad, z),
        p_1(mitad, z), p_2(mitad, z), p_3(mitad, z), p_4(mitad, z),
        p_5(mitad, z), p_6(mitad, z), p_7(mitad, z),
        Result_a(mitad, z), Result_b(mitad, z);

    //Los lleanmos con los datos de las matrices A y B
   
    int i, j;
    for (i = 0; i < mitad; i++)
    {
        for (j = 0; j < mitad; j++)
        {
            
            a_11[i][j] = A[i][j];       
            a_12[i][j] = A[i][j + mitad];   
            a_21[i][j] = A[i + mitad][j];
            a_22[i][j] = A[i + mitad][j + mitad];
            b_11[i][j] = B[i][j];
            b_12[i][j] = B[i][j + mitad];
            b_21[i][j] = B[i + mitad][j];
            b_22[i][j] = B[i + mitad][j + mitad];
        }
    }

    // Calcular p_1 a p_7.
    
    
    Suma(a_11, a_22, Result_a, mitad);
    Suma(b_11, b_22, Result_b, mitad);
    Strassen(Result_a, Result_b, p_1, mitad, minimo);
    Suma(a_21, a_22, Result_a, mitad);
    Strassen(Result_a, b_11, p_2, mitad, minimo);
    Resta(b_12, b_22, Result_b, mitad);
    Strassen(a_11, Result_b, p_3, mitad, minimo);
    Resta(b_21, b_11, Result_b, mitad);
    Strassen(a_22, Result_b, p_4, mitad, minimo);
    Suma(a_11, a_12, Result_a, mitad);
    Strassen(Result_a, b_22, p_5, mitad, minimo);
    Resta(a_21, a_11, Result_a, mitad);
    Suma(b_11, b_12, Result_b, mitad);
    Strassen(Result_a, Result_b, p_6, mitad, minimo);
    Resta(a_12, a_22, Result_a, mitad);
    Suma(b_21, b_22, Result_b, mitad);
    Strassen(Result_a, Result_b, p_7, mitad, minimo);

    // con lo anterior, calculamos las submatrices resultantes c_ij:


    Suma(p_3, p_5, c_12, mitad);
    Suma(p_2, p_4, c_21, mitad);
    Suma(p_1, p_4, Result_a, mitad);
    Suma(Result_a, p_7, Result_b, mitad);
    Resta(Result_b, p_5, c_11, mitad);
    Suma(p_1, p_3, Result_a, mitad);
    Suma(Result_a, p_6, Result_b, mitad);
   Resta(Result_b, p_2, c_22, mitad);

    // Agrupamos las submatrices resultantes c_ij en la matriz C:
    for (i = 0; i < mitad; i++)
    {
        for (j = 0; j < mitad; j++)
        {
            C[i][j] = c_11[i][j];
            C[i][j + mitad] = c_12[i][j];
            C[i + mitad][j] = c_21[i][j];
            C[i + mitad][j + mitad] = c_22[i][j];
        }
    }
}

int main() {

    long long unsigned int n, i, j, d1, p_1, r1, m1, d2, p_2, r2, m2;
    cin >> n >> p_1 >> d1 >> r1 >> m1 >> p_2 >> d2 >> r2 >> m2;


    vector<vector<uint32_t>> A(n, vector<uint32_t>(n));
    vector<vector<uint32_t>> B(n, vector<uint32_t>(n));
    vector<vector<long long unsigned int>> C(n, vector<long long unsigned int>(n));
    vector<long long unsigned int> V(n, 0);

    /* se generan las matirces A y B utilizando las variables de entrada: */
    for (i = 0; i < n; ++i) {
        for (j = 0; j < n; ++j) {
            d1 = d1 * p_1 + r1;
            d2 = d2 * p_2 + r2;
            A[i][j] = d1 >> (32 - m1);
            B[i][j] = d2 >> (32 - m2);
        }
    }

    // se calcula la potencia de 2 más cercana a n:
    int mitad = potencia2(n);
    vector<long long unsigned int> z(mitad);
    vector<vector<long long unsigned int>> A_exp(mitad, z), B_exp(mitad, z), C_exp(mitad, z);

    /* los valores de las matrices A y B se copian a A_exp y B_exp: */
    for (i = 0; i < n; ++i) {
        for (j = 0; j < n; ++j) {
            A_exp[i][j] = static_cast<long long unsigned int>(A[i][j]);
            B_exp[i][j] = static_cast<long long unsigned int>(B[i][j]);
        }
    }

    // límite para cambiar a multiplicación estándar cuando el tamaño es pequeño:
    int minimo = 64; 
    // calculo del algoritmo de Strassen: 
    Strassen(A_exp, B_exp, C_exp, mitad, minimo);

    // copiamos los resultados de C_exp a la matriz original C:
    for (i = 0; i < n; ++i) {
        for (j = 0; j < n; ++j) {
            C[i][j] = C_exp[i][j];
        }
    }

    for (i = 0; i < n; ++i) {
        V[i] = 0;
        for (j = 0; j < n; ++j) {
            V[i] ^= C[i][j];
        }
    }

    // se imprimen los valores de V separados por espacios:
    for (i = 0; i < n; ++i) {
        cout << V[i] << " ";
    }
    cout << endl;

    return 0;
}
