#include <iostream>
#include <vector>
#include <utility>
using namespace std;
int t=0;
int n=0;
vector<pair<int,int>>  arreglo;
vector <pair<int,int>> VectorR;
//MergeSort
void merge(vector<pair<int,int>>&arreglo,int inicio, int mitad, int final){
    int i,j,k;
    int elementosIzq = mitad - inicio + 1;
    int elementosDer = final - mitad;

    vector<pair<int,int>>izquierda(elementosIzq);
    vector<pair<int,int>>derecha(elementosDer);

    for(int i = 0; i < elementosIzq; i++){
        izquierda[i] = arreglo[inicio+i];
    }
    for(int j = 0; j < elementosDer; j++){
        derecha[j] = arreglo[mitad + 1 + j];
    }

    i = 0;
    j = 0;
    k = inicio;

    while(i < elementosIzq && j < elementosDer){
        if(izquierda[i].first >= derecha[j].first){
            arreglo[k] = izquierda[i];
            i++;
        }else{
            arreglo[k] = derecha[j];
            j++;
        }
        k++;
    }

    while(j < elementosDer){
        arreglo[k] = derecha[j];
        j++;
        k++;
    }

    while(i < elementosIzq){
        arreglo[k] = izquierda[i];
        i++;
        k++;
    }

}

void mergeSort(vector<pair<int,int>>&arreglo,int inicio, int final){
    if(inicio < final){
        int mitad = inicio + (final - inicio)/2;
        mergeSort(arreglo,inicio,mitad);
        mergeSort(arreglo,mitad+1,final);
        merge(arreglo,inicio,mitad,final);
    }
}

int binary_search(vector<pair<int,int>>&arreglo,int inicio, int final, long long numero){
    while (inicio < final){
        int mitad = inicio + (final - inicio)/2;
        if(arreglo[mitad].first > numero){
            inicio = mitad+1;
        }else{
            final = mitad;
        }
    }
    return inicio;
}


int main(){
    cin >> t;
    for(int i = 0; i < t; i++){
        cin >> n;
        arreglo.resize(n);
        for(int j = 0; j < n; j++){
            cin >> arreglo[j].first;
            arreglo[j].second=j;
        }
        //Ordenamos el arreglo de mayor a menor
        mergeSort(arreglo,0,n-1);
        //Resolvemos el problema
        //Al colocarlos de Mayor a menor. Se nos permite usar Binary search para ir
        //buscando el número mas grande que sea menor o igual a la suma
        //Despues Basta con usar la posicion del arreglo para designar el numero de colección
        int index1=n-1;
        long long suma=0;
        int temp=0;
        cont=0;
        VectorR.resize(n);
        while (index1>=0){
            suma+=arreglo[index1].first;
            temp=index1;
            int index2=binary_search(arreglo,0,n-1,suma);
            while (temp != index2){
                for (int j = index2; j < temp; j++){
                    suma+=arreglo[j].first;
                }
                temp=index2;
                index2=binary_search(arreglo,0,temp,suma);
            }
            for (int j = index2; j <= index1; j++){
                VectorR[j]=make_pair(arreglo[j].second,n-temp-1);
                
            }
            index1=temp-1;
        }
        
        //Entragamos la respuesta en el orden original
        //Esto es posible debido a que siempre se uso la información de ordenamiento original
        mergeSort(VectorR,0,n-1);
        for (int j = n-1; j >=0; j--){
            cout << VectorR[j].second << " ";
        }
        cout << endl;
        
    } 
}
